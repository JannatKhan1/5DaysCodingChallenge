Problem 3: Find Transition Point In Array
Given a sorted array containing only 0s and 1s, find the transition point, i.e., the first index where 1 was observed, and before that, only 0 was observed.
Solution:
<b>Logic/Idea :</b> Narrow down the search range by dividing the array into half. Use binary search instead of linear search.
<b>Algorithm:</b>
1. Initialize the variables: low and high - starting and ending index of search range respectively.
2. Binary search loop:
   (i) While low is less than high,loop continues.
   (ii) Calculate mid from current search range.
3. Condition in binary loop:
   (i) if arr[mid] = 1 and element before mid is 0 or mid is 0 then mid is transition point.
   (ii) if arr[mid] = 1, update high = mid - 1 and shift the search in  left half.
   (iii) if arr[mid] = 0, update low = mid + 1 and shift the search in right half.
4. Return -1 if no transition point is found.

<b>Lessons Learnt:</b>
1. T.C. of Binary search = O(log n)
   T.C. of Linear search = O(n)
2. Binary search is effective for sorted arrays.
3. Binary search is DAC algorithm that reduces search space by half repeatedly till the target is found.
4. The formula to calculate mid:
   (high - low)/2 is used rather than (high + low)/2 to avoid overflow issues for large integers.
   low is added to get distance from low point i.e. index of element in an array.
